function cleanHdlcoderComments(files, removeAll)
% DSPHDL / cleanHdlcoderComments
% 
% Description
%   Many of the comments generated by the HDL Coder tool can be
%   inconsistent and interfere with change tracking.  This script attempts
%   to reduce that effect.
% 
% Inputs: 
% 
%   files: string or cell array of strings
%       List of files to process
% 
% Author: Mike Babst <mike.babst@dsplogic.com>
%
% -------------------------------------------------------------------------
% Copyright (c) 2005-2025 DSPlogic, Inc.
% Distributed under the terms of the Simplified BSD License.
% The full license is in the file LICENSE, distributed with this software.
% -------------------------------------------------------------------------

disp('Cleaning HDL Coder Output files')
if iscell(files)
    for k = 1:length(files)
        removeComments(files{k}, removeAll);
    end
elseif ischar(files)
    removeComments(files, removeAll);
else
    error('Need cell or char input')
end

end


function removeComments(fname, removeAll)

if exist(fname,'file');
    
    isVHD = ~isempty(strfind(fname,'.vhd'));
    isVER = ~isempty(strfind(fname,'.v'));
    
    isTB  = ~isempty(strfind(fname,'_tb'));
    isDO  = ~isempty(strfind(fname,'.do'));
    isPKG = ~isempty(strfind(fname,'_pkg.vhd'));
    
    isCODE = (isVHD || isVER) && not(isTB | isDO | isPKG );
    
    [fl,p] = grep('Generated by MATLAB',fname);
    hasHeader = ~isempty(fl);
    
    if isVHD
        
        
        tmpFile = [fname '.tmp'];
        fid1 = fopen(fname,'r');
        fid2 = fopen(tmpFile,'w');
        
        tline = fgets(fid1);
        while ischar(tline)
            pat_matlabref     = '-- <\w*>/';   
            pat_matlabref_eml = '--''<\w*>';   % --'<S41>:1:61'
            pat_matdatatype   = '-- [su][(fix)(int)]\w* ?(\[?\w*\]?)?';  % Remove data type sfix32[8], uint, etc, at end of lines  -- sfix12_En11 [4]
            %pat_matdatatype   = '-- [su][(fix)(int)]\w*\s*\[?\w*\]?';  % Remove data type sfix32[8], uint, etc, at end of lines  -- sfix12_En11 [4]
            pat_matboolean    = '-- boolean ?(\[?\w*\]?)?';
            %pat_matboolean    = '-- boolean\s*\[?\w*\]?';
            % cleanup lines
            tline = regexprep(tline,pat_matdatatype,'');   % remove data type
            tline = regexprep(tline,pat_matboolean,'');   % remove data type

            % skip lines
            skipline = 0;
            if ~isempty(regexp(tline,'--MATLAB Function','once'))
                skipline = 1;
            end
            if ~isempty(regexp(tline,pat_matlabref,'once'))  
                skipline = 1;
            end
            if ~isempty(regexp(tline,pat_matlabref_eml,'once')) 
                skipline = 1;
            end
            if ~isempty(regexp(tline,'-- Component Configuration Statements','once')) 
                skipline = 1;
            end
            
            if removeAll % Remove all comments
                if ~isempty(regexp(tline,'--','once'))
                    skipline = 1;
                end
            end
            
            % Output line if not skipped
            if ~skipline
                fprintf(fid2,'%s',tline);
            end
            
            tline = fgets(fid1);
        end
        fclose(fid1);
        fclose(fid2);
        

        [success,message,messageid] = copyfile(tmpFile, fname);
        
        replaceHeader(fname); % Finally replace header
        
        if success
            delete(tmpFile);
        else
            disp(message);
        end
        disp(['Removed HDL Coder comments from file: ' fname]);
    end
    
else
    error(['File not found: ' fname]);
end


end

function replaceHeader(fname)

% Count number of line to end of header

fid1 = fopen(fname,'r');
endHeader = 0;
lineNo = 0;
tline = fgets(fid1);
while ischar(tline)
    lineNo = lineNo + 1;
    if strfind(tline,'-- -------');
        endHeader = lineNo;
    end
    tline = fgets(fid1);
end
fclose(fid1);

% Write new file, insert new header
tmpFile = [fname '.tmp'];
fid1 = fopen(fname,'r');
fid2 = fopen(tmpFile,'w');

[filepath,filename,fileext]=fileparts(fname);
fprintf(fid2,'%s\n', '-- ---------------------------------------------------------------' );
fprintf(fid2,'%s\n',['-- File        : ' filename  fileext                              ]);
fprintf(fid2,'%s\n', '-- ---------------------------------------------------------------' );
fprintf(fid2,'%s\n', '-- This file is automatically generated                           ' );
fprintf(fid2,'%s\n', '-- ---------------------------------------------------------------' );
% Write new file, skipping header
lineNo = 0;
tline = fgets(fid1);
while ischar(tline)
    lineNo = lineNo + 1;
    if lineNo > endHeader
        fprintf(fid2,'%s',tline);
    end
    tline = fgets(fid1);
end
fclose(fid1);
fclose(fid2);
[success,message,messageid] = copyfile(tmpFile, fname);
if success
    delete(tmpFile);
else
    disp(message);
end
disp(['File: ' fname ' - removed header.']);

end



